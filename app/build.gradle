plugins {
    id "com.android.application"
}

def ciBuild = System.getenv("CI") == "true"
def ciRef = System.getenv("GITHUB_REF") ?: ""
def ciRunNumber = System.getenv("GITHUB_RUN_NUMBER") ?: ""
def isReleaseBuild = ciBuild && ciRef.contains("master") || System.getenv("RELEASE") == "true"

def version = "0.1.1"
def versionDisplayName = "${version}"
if (!isReleaseBuild) {
    versionDisplayName = "${version} Dev${ciBuild ? " (#${ciRunNumber})" : ""}"
}

android {
    compileSdk 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.gt.launcher"
        minSdk 16
        targetSdk 31
        versionCode 3
        versionName "${versionDisplayName}"
        multiDexEnabled true

        buildConfigField "String", "VERSION_DISPLAY_NAME", "\"v${versionDisplayName}\""

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }

        externalNativeBuild {
            ndkBuild {
                arguments getProcessesCountArg()
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("dev_keystore.jks")
            keyAlias "alias"
            storePassword "iJihsOwtnS"
            keyPassword "iJihsOwtnS"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    sourceSets {
        main {
            jniLibs.srcDir "src/main/jniLibs"
            aidl.srcDirs "src/main/java"
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (isReleaseBuild) {
                outputFileName = new File("gtlauncher-v${version}.apk")
            } else if (ciBuild) {
                outputFileName = new File("gtlauncher-v${version}-dev-(#${ciRunNumber}).apk")
            } else {
                outputFileName = new File("gtlauncher-${variant.buildType.name}.apk")
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])

    implementation "androidx.appcompat:appcompat:1.4.1"
    implementation "com.google.android.material:material:1.5.0"
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    implementation "net.lingala.zip4j:zip4j:2.9.1"

    // Needed by Growtopia
    implementation "com.tapjoy:tapjoy-android-sdk:12.9.0"
    implementation "org.jbundle.util.osgi.wrapped:org.jbundle.util.osgi.wrapped.org.apache.http.client:4.1.2"
    // implementation "com.appsflyer:af-android-sdk:6.4.3"
    implementation "com.android.billingclient:billing:4.0.0"
    implementation "com.google.android.gms:play-services-base:18.0.1"
    implementation "com.google.android.gms:play-services-gcm:17.0.0"
    implementation "com.google.android.gms:play-services-drive:17.0.0"
    implementation "com.google.android.gms:play-services-ads:20.5.0"
    implementation "com.google.firebase:firebase-appindexing:20.0.0"
}

def getProcessesCountArg() {
    def procCount = Runtime.runtime.availableProcessors()

    Gradle gradle = getGradle()
    def isClean = gradle.getStartParameter().getTaskNames().find { it ==~ /.*clean.*/ }
    if (isClean) {
        procCount = 1
    }

    return "-j" + procCount
}
